{"version":3,"sources":["components/Loading.jsx","libs/steamClient.js","libs/interceptors.js","config.js","appsCurrentPlayers/redux/actions.js","appsCurrentPlayers/redux/reducer.js","appsCurrentPlayers/redux/selectors.js","appsCurrentPlayers/redux/propTypes.js","appsCurrentPlayers/components/PlayerCount.jsx","appsCurrentPlayers/containers/AppCurrentPlayers.jsx","serviceWorker.js","index.js","configureStore.js","rootReducer.js","games/containers/Games.jsx"],"names":["Loading","react_default","a","createElement","client","steamClient","Axios","create","baseURL","concat","process","addErrorCatching","interceptors","response","use","identity","error","fetchCurrentPlayersRequest","createAction","fetchCurrentPlayersSuccess","fetchCurrentPlayersFailure","consts","actions","getCurrentPlayers","appId","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","dispatch","_ref2","data","wrap","_context","prev","next","get","params","sent","abrupt","stop","this","_x","apply","arguments","reducer","handleActions","_handleActions","defineProperty","produce","draft","payload","loading","loaded","foundApp","apps","find","app","id","push","_ref2$payload","currApp","some","every","_ref3","_ref3$payload","name","appMapper","_ref$data","playerCount","player_count","rest","objectWithoutProperties","objectSpread","currentPlayersSelector","state","appsSelector","createSelector","map","selectors","PropTypes","shape","string","isRequired","bool","number","object","Container","styled","_templateObject","PlayerCount","className","css","_templateObject2","color","AppCurrentPlayers","_React$Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","inherits","createClass","key","value","_this$props","props","_this$props2","currentPlayers","React","Component","defaultProps","connectToStore","connect","createStructuredSelector","compose","Boolean","window","location","hostname","match","injectGlobal","src_templateObject","store","asyncReducers","initialState","length","undefined","middlewares","thunk","enhancers","applyMiddleware","composeEnhancers","createStore","combineReducers","appsCurrentPlayers","configureStore","ReactDOM","render","es","containers_AppCurrentPlayers","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8434788a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function Loading() {\n  return <div>Loading</div>;\n}\n","import Axios from 'axios';\nimport config from 'config';\n\nimport { addErrorCatching } from './interceptors';\n\nconst steamClient = Axios.create({\n  baseURL: `${config.steamApi}`,\n});\n\nexport default addErrorCatching(steamClient);\n","import identity from 'lodash/fp/identity';\n\n// eslint-disable-next-line import/prefer-default-export\nexport function addErrorCatching(client) {\n  client.interceptors.response.use(identity, error => ({\n    error,\n  }));\n  return client;\n}\n","export default {\n  steamApi: process.env.REACT_APP_STEAM_API,\n};\n","import { createAction } from 'redux-actions';\nimport steamClient from 'libs/steamClient';\n\nconst fetchCurrentPlayersRequest = createAction('FETCH_CURRENT_PLAYERS_REQUEST');\nconst fetchCurrentPlayersSuccess = createAction('FETCH_CURRENT_PLAYERS_SUCCESS');\nconst fetchCurrentPlayersFailure = createAction('FETCH_CURRENT_PLAYERS_FAILURE');\n\n// TODO: not call api if already game in store\n\nconst getCurrentPlayers = appId => async dispatch => {\n  dispatch(fetchCurrentPlayersRequest({ appId }));\n\n  const { data, error } = await steamClient.get(\n    '/ISteamUserStats/GetNumberOfCurrentPlayers/v0001/',\n    { params: { appId } },\n  );\n\n  if (error) {\n    dispatch(fetchCurrentPlayersFailure({ appId, error }));\n    return;\n  }\n\n  dispatch(fetchCurrentPlayersSuccess({ appId, data: data.response }));\n};\n\nexport const consts = {\n  fetchCurrentPlayersRequest,\n  fetchCurrentPlayersSuccess,\n  fetchCurrentPlayersFailure,\n};\n\nexport default {\n  getCurrentPlayers,\n};\n","import produce from 'immer';\nimport { handleActions } from 'redux-actions';\n\nimport { consts } from './actions';\n\nconst initialState = {\n  loading: false,\n  error: false,\n  loaded: false,\n  apps: [],\n};\n\n// TODO: add top loading state validating sub-states\n\n/* eslint-disable no-param-reassign */\n\nexport default handleActions(\n  {\n    [consts.fetchCurrentPlayersRequest]: produce((draft, { payload: { appId } }) => {\n      draft.loading = true;\n      draft.loaded = false;\n      const foundApp = draft.apps.find(app => app.id === appId);\n      if (foundApp) {\n        foundApp.loading = true;\n        foundApp.loaded = false;\n        return;\n      }\n      draft.apps.push({\n        id: appId,\n        loading: true,\n        error: null,\n        loaded: false,\n      });\n    }),\n    [consts.fetchCurrentPlayersSuccess]: produce((draft, { payload: { appId, data } }) => {\n      const currApp = draft.apps.find(app => app.id === appId);\n\n      currApp.data = data;\n      currApp.loading = false;\n      currApp.error = null;\n      currApp.loaded = true;\n\n      draft.loading = draft.apps.some(app => app.loading);\n      draft.loaded = draft.apps.every(app => app.loaded);\n    }),\n    [consts.fetchCurrentPlayersFailure]: produce((draft, { payload: { appId, error } }) => {\n      const currApp = draft.apps.find(app => app.id === appId);\n\n      currApp.error = error;\n      currApp.loading = false;\n      currApp.loaded = true;\n\n      draft.loading = draft.apps.some(app => app.loading);\n      draft.loaded = draft.apps.every(app => app.loaded);\n    }),\n  },\n  initialState,\n);\n\n/* eslint-enable no-param-reassign */\n\nexport const name = 'appsCurrentPlayers';\n","import { createSelector } from 'reselect';\nimport { name } from './reducer';\n\nconst appMapper = ({ data: { player_count: playerCount } = {}, ...rest }) => ({\n  ...rest,\n  ...(playerCount && { playerCount }),\n});\n\nconst currentPlayersSelector = state => state[name] || {};\n\nexport const loadingSelector = createSelector(currentPlayersSelector, ({ loading }) => loading);\n\nexport const appsSelector = createSelector(currentPlayersSelector, ({ apps }) =>\n  apps.map(appMapper),\n);\n\nexport const currentPlayersByAppIdSelector = appId =>\n  createSelector(appsSelector, apps => apps.find(app => app.id === appId));\n\nexport default {\n  loading: loadingSelector,\n  apps: appsSelector,\n  currentPlayersByAppId: currentPlayersByAppIdSelector,\n};\n","import PropTypes from 'prop-types';\n\nexport default {\n  currentPlayers: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    playerCount: PropTypes.number,\n    error: PropTypes.object,\n  }),\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled, { css } from 'react-emotion';\n\nconst Container = styled('div')`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  background-color: green;\n`;\n\nexport default function PlayerCount({ appId, playerCount }) {\n  return (\n    <Container>\n      <p\n        className={css`\n          color: mediumspringgreen;\n        `}\n      >\n        ID: {appId}\n      </p>\n      <p className={css({ color: 'cornsilk' })}>Count: {playerCount}</p>\n    </Container>\n  );\n}\n\nPlayerCount.propTypes = {\n  appId: PropTypes.string.isRequired,\n  playerCount: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport compose from 'lodash/fp/compose';\n\nimport Loading from 'components/Loading';\nimport actions from 'appsCurrentPlayers/redux/actions';\nimport selectors from 'appsCurrentPlayers/redux/selectors';\nimport propTypes from 'appsCurrentPlayers/redux/propTypes';\nimport PlayerCount from '../components/PlayerCount';\n\nexport class AppCurrentPlayers extends React.Component {\n  componentDidMount() {\n    const { appId, getCurrentPlayers } = this.props;\n    getCurrentPlayers(appId);\n  }\n\n  render() {\n    const { appId, currentPlayers } = this.props;\n\n    if (!currentPlayers || !currentPlayers.loaded) {\n      return <Loading />;\n    }\n\n    return <PlayerCount appId={appId} playerCount={currentPlayers.playerCount} />;\n  }\n}\n\nAppCurrentPlayers.propTypes = {\n  getCurrentPlayers: PropTypes.func.isRequired,\n  appId: PropTypes.string.isRequired,\n  currentPlayers: propTypes.currentPlayers,\n};\n\nAppCurrentPlayers.defaultProps = {\n  currentPlayers: void 0,\n};\n\nconst mapStateToProps = (state, props) =>\n  createStructuredSelector({\n    currentPlayers: selectors.currentPlayersByAppId(props.appId),\n  })(state, props);\n\nconst connectToStore = connect(\n  mapStateToProps,\n  {\n    getCurrentPlayers: actions.getCurrentPlayers,\n  },\n);\n\nexport default compose(connectToStore)(AppCurrentPlayers);\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport { injectGlobal } from 'react-emotion';\n\nimport Games from 'games/containers/Games';\nimport configureStore from './configureStore';\nimport * as serviceWorker from './serviceWorker';\n\ninjectGlobal`\n  body{\n    margin: 0;\n    padding: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu',\n      'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n`;\n\nconst store = configureStore();\n\n/* eslint-disable react/jsx-filename-extension */\nReactDOM.render(\n  <Provider store={store}>\n    <Games />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Create the store with asynchronously loaded reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nexport default function configureStore(initialState = {}) {\n  // Create the store with two middlewares\n  // 1. routerMiddleware: Syncs the location/URL path to the state\n  // 2. thunk to dispatch thunks :)\n  const middlewares = [thunk];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  // If Redux DevTools Extension is installed use it, otherwise use Redux compose\n  /* eslint-disable */\n  const composeEnhancers =\n    process.env.NODE_ENV !== 'production' &&\n    typeof window === 'object' &&\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n      : compose;\n  /* eslint-enable */\n\n  const store = createStore(rootReducer(), initialState, composeEnhancers(...enhancers));\n\n  // Extensions\n  store.asyncReducers = {}; // Async reducer registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV === 'development') {\n    if (module.hot) {\n      module.hot.accept('./rootReducer', () => {\n        // eslint-disable-next-line global-require\n        require('./rootReducer').then(reducerModule => {\n          const createReducers = reducerModule.default;\n          const nextReducers = createReducers(store.asyncReducers);\n\n          store.replaceReducer(nextReducers);\n        });\n      });\n    }\n  }\n\n  return store;\n}\n","import { combineReducers } from 'redux';\nimport * as appsCurrentPlayers from 'appsCurrentPlayers/redux/reducer';\n\nexport default function createReducer(asyncReducers) {\n  return combineReducers({\n    [appsCurrentPlayers.name]: appsCurrentPlayers.default,\n    ...asyncReducers,\n  });\n}\n","import React from 'react';\nimport AppPlayers from 'appsCurrentPlayers/containers/AppCurrentPlayers';\n\nexport default function Games() {\n  return (\n    <div>\n      <h1> Our Cool Games</h1>\n      <AppPlayers appId=\"578080\" />\n      <AppPlayers appId=\"570\" />\n      <AppPlayers appId=\"730\" />\n      <AppPlayers appId=\"673950\" />\n      <AppPlayers appId=\"359550\" />\n      <AppPlayers appId=\"230410\" />\n    </div>\n  );\n}\n"],"sourceRoot":""}